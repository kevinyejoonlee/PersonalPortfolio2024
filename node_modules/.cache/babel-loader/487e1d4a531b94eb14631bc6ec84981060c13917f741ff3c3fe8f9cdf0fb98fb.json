{"ast":null,"code":"var _jsxFileName = \"/Users/kevinlee/VSCODE/2023 web development course/16.5 portfolio/portfolio/src/components/typing_effect/typing.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport Typed from 'typed.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst typing = () => {\n  _s();\n  // Create a ref to store the Typed instance\n  const typed = useRef(null);\n  const el = useRef(null);\n  useEffect(() => {\n    const options = {\n      strings: ['First sentence.', 'Second sentence.'],\n      typeSpeed: 50,\n      backSpeed: 25,\n      loop: true\n    };\n\n    // el.current refers to the <span> in the return statement\n    typed.current = new Typed(el.current, options);\n    return () => {\n      // Make sure to destroy Typed instance during cleanup\n      // to prevent memory leaks\n      typed.current.destroy();\n    };\n  }, []); // Empty array ensures this effect only runs once\n\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    ref: el\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 12\n  }, this);\n};\n_s(typing, \"WLe1kAOWDJakvuvxvOGefNfaTuQ=\");\nexport default typing;","map":{"version":3,"names":["React","useEffect","useRef","Typed","jsxDEV","_jsxDEV","typing","_s","typed","el","options","strings","typeSpeed","backSpeed","loop","current","destroy","ref","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/kevinlee/VSCODE/2023 web development course/16.5 portfolio/portfolio/src/components/typing_effect/typing.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport Typed from 'typed.js';\n\nconst typing = () => {\n    // Create a ref to store the Typed instance\n    const typed = useRef(null);\n    const el = useRef(null);\n  \n    useEffect(() => {\n      const options = {\n        strings: [\n          'First sentence.',\n          'Second sentence.'\n        ],\n        typeSpeed: 50,\n        backSpeed: 25,\n        loop: true,\n      };\n  \n      // el.current refers to the <span> in the return statement\n      typed.current = new Typed(el.current, options);\n  \n      return () => {\n        // Make sure to destroy Typed instance during cleanup\n        // to prevent memory leaks\n        typed.current.destroy();\n      };\n    }, []); // Empty array ensures this effect only runs once\n  \n    return <span ref={el} />;\n  };\n  \n  export default typing;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAOC,KAAK,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB;EACA,MAAMC,KAAK,GAAGN,MAAM,CAAC,IAAI,CAAC;EAC1B,MAAMO,EAAE,GAAGP,MAAM,CAAC,IAAI,CAAC;EAEvBD,SAAS,CAAC,MAAM;IACd,MAAMS,OAAO,GAAG;MACdC,OAAO,EAAE,CACP,iBAAiB,EACjB,kBAAkB,CACnB;MACDC,SAAS,EAAE,EAAE;MACbC,SAAS,EAAE,EAAE;MACbC,IAAI,EAAE;IACR,CAAC;;IAED;IACAN,KAAK,CAACO,OAAO,GAAG,IAAIZ,KAAK,CAACM,EAAE,CAACM,OAAO,EAAEL,OAAO,CAAC;IAE9C,OAAO,MAAM;MACX;MACA;MACAF,KAAK,CAACO,OAAO,CAACC,OAAO,CAAC,CAAC;IACzB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBAAOX,OAAA;IAAMY,GAAG,EAAER;EAAG;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC1B,CAAC;AAACd,EAAA,CA3BED,MAAM;AA6BV,eAAeA,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}